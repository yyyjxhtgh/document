Spring boot logging implementation with logback and Sleuth framework

All IQ spring boot logging implementation should be standardized.  That includes logging data and implementation.   For logging data standard please refer to Application Logging Standard.
This section will cover the implementation standards:

1.	Spring Cloud Sleuth

We will use spring sleuth to create unique tracing id so that we track the progress of subsequent microservices in a chained request.   It is by adding trace and span id’s on the appropriate HTTP request headers.  This library makes it possible to identify logs pertaining to a specific job, thread, or request. It is based on the MDC (Mapped Diagnostic Context) concept, where you can easily extract values put to context and display them in the logs.  Sleuth integrates effortlessly with logging frameworks like Logback and SLF4J to add unique identifiers that help track and diagnose issues using logs.
  
Here is the sample of logging from iq registration service:

2020-05-18 15:27:12.586 DEBUG [iq-registration-service,bbe8c21b32722928,bbe8c21b32722928] End inserting 1589830032586
2020-05-18 15:27:12.587  INFO [iq-registration-service,bbe8c21b32722928,bbe8c21b32722928] Exiting 
ProvisionUserController.register
2020-05-18 15:27:12.652  INFO [iq-registration-service,bbe8c21b32722928,0f4a831fb6e96ec5] Entering UpdateDBService.insertAccessTables

The part between the brackets is provided by sleuth. This is the core information that Spring Sleuth has added. This data follows the format of:

               [application name, traceId, spanId, export] //We remove export flag since it is not used for now.

Application name – This is the name we set in the properties file and can be used to aggregate logs from multiple instances of the same application.
TraceId – This is an id that is assigned to a single request, job, or action. Something like each unique user initiated web request will have its own traceId.
SpanId – Tracks a unit of work. Think of a request that consists of multiple steps. Each step could have its own spanId and be tracked individually. By default, any application flow will start with same TraceId and SpanId.
Export – This property is a boolean that indicates whether or not this log was exported to an aggregator like Zipkin. Zipkin is beyond the scope of this article but plays an important role in analyzing logs created by Sleuth.

Take note that the trace and span ids are the same between the two logs even though the messages originate from two different classes. This makes it trivial to identify each log during a request by searching for the traceId of that request.

This is the default behavior, one request gets a single traceId and spanId.  Spring sleuth generates various spanId automatically for new restTemplate or asyc calls.   We can manually add spans as we see fit.  For restTemplate calls sleuth automatically adds traceId in http header as X-B3-TraceId.

The implementation is quite straightforward.   If you are using iq-service-parent pom you can just add the following to your application pom:

<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-sleuth</artifactId>
</dependency>


Sleuth can integrate with Zipkin which is distributed tracing system that helps gather timing data for every request propagated between independent services. It has simple management console where we can find a visualization of the time statistics generated by subsequent services.
                    

Sleuth can also integrate with Splunk which is centralized logs analysis tool for machine generated data, unstructured/structured and complex multi-line data which provides the following features such as Easy Search/Navigate, Real-Time Visibility, Historical Analytics, Reports, Alerts, Dashboards and Visualization.

The integration with zipkin and splunk is out of scope for this section.


2.	Logback Configguration

As we have said earlier Sleuth integrates effortlessly with logging frameworks like Logback and SLF4J.   Here are the details:

•	Define logging file  folder in externalized application yaml file:
logging:
    file: /opt/wt/logs
Usually it should be common for all idp integration services.   Note that this is log file folder directory.  We would like each service has it own standard name which defined in logback-spring.xml.

•	Define logback-spring.xml under resources folder

We will standardize log file name as : 
${LOG_FILE}/${springAppName}/${springAppName}-%d{yyyy-MM-dd}.%i.log

Here, ${LOG_FILE} is the file folder location defined in yaml.

You can find complete Logback-spring.xml sample in team.   Note console should be moved once deployed to test environments.

